from aiogram import Bot, Dispatcher, executor, types
from cfg import TOKEN_API


HELP_COMMAND="""
/help - command list
/start - start work with this bot"""

bot=Bot(TOKEN_API)
dp=Dispatcher(bot)



@dp.message_handler(commands=['help'])
async def help_command(mesage: types.Message):
    await mesage.answer(text=HELP_COMMAND)
    await mesage.delete()


@dp.message_handler(commands=['start'])
async def help_command(mesage: types.Message):
    await mesage.answer(text="work started")
    await mesage.delete()


@dp.message_handler(text=('–¥–∞'))
async def process_start_command(message: types.Message):
   await message.answer('–ø–∏–∑–¥–∞')

@dp.message_handler(text=('–î–∞'))
async def process_start_command(message: types.Message):
   await message.answer('–ø–∏–∑–¥–∞')

@dp.message_handler(text=('–î–ê'))
async def process_start_command(message: types.Message):
   await message.answer('–ø–∏–∑–¥–∞')

@dp.message_handler(text=('Da'))
async def process_start_command(message: types.Message):
   await message.answer('–ø–∏–∑–¥–∞')


@dp.message_handler(text=('—Ç—ã –µ–±–∞–ª–∞–Ω?'))
async def process_start_command(message: types.Message):
   await message.answer('–∞ –º–æ–∂–µ—Ç —Ç—ã?' + ' ü¶É')
   
@dp.message_handler(text=('–¢—ã –µ–±–ª–∞–Ω?'))
async def process_start_command(message: types.Message):
   await message.answer('–∞ –º–æ–∂–µ—Ç —Ç—ã?' + ' ü¶É')

@dp.message_handler(text=('–¢—ã –µ–±–∞–ª–∞–Ω?'))
async def process_start_command(message: types.Message):
   await message.answer('–∞ –º–æ–∂–µ—Ç —Ç—ã?' + ' ü¶É')

@dp.message_handler(text=('—Ç—ã –µ–±–ª–∞–Ω?'))
async def process_start_command(message: types.Message):
   await message.answer('–∞ –º–æ–∂–µ—Ç —Ç—ã?' + ' ü¶É')


@dp.message_handler(text=('—Ç—ã –µ–±–ª–∞–Ω ?'))
async def process_start_command(message: types.Message):
   await message.answer('–∞ –º–æ–∂–µ—Ç —Ç—ã?' + ' ü¶É')

@dp.message_handler(text=('–¢—ã –µ–±–ª–∞–Ω ?'))
async def process_start_command(message: types.Message):
   await message.answer('–∞ –º–æ–∂–µ—Ç —Ç—ã?' + ' ü¶É')

@dp.message_handler(text=('–∞'))
async def process_start_command(message: types.Message):
   await message.answer('—Ö—É–π –Ω–∞')

@dp.message_handler(text=('–ê'))
async def process_start_command(message: types.Message):
   await message.answer('—Ö—É–π –Ω–∞')   

@dp.message_handler(text=('a'))
async def process_start_command(message: types.Message):
   await message.answer('—Ö—É–π –Ω–∞')

@dp.message_handler(text=('A'))
async def process_start_command(message: types.Message):
   await message.answer('—Ö—É–π –Ω–∞')


@dp.message_handler(text=('–Ω–µ—Ç'))
async def process_start_command(message: types.Message):
   await message.answer('–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç')

@dp.message_handler(text=('–ù–µ—Ç'))
async def process_start_command(message: types.Message):
   await message.answer('–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç')

@dp.message_handler(text=('no'))
async def process_start_command(message: types.Message):
   await message.answer('pidora otvet')

@dp.message_handler(text=('No'))
async def process_start_command(message: types.Message):
   await message.answer('pidora otver')

@dp.message_handler(text=('NO'))
async def process_start_command(message: types.Message):
   await message.answer('pidora otvet')

@dp.message_handler(text=('–ù–ï–¢'))
async def process_start_command(message: types.Message):
   await message.answer('–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç')



if __name__ == '__main__':
    executor.start_polling(dp)
